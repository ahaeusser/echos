[{"path":"https://ahaeusser.github.io/echos/articles/vignette_01_baseR.html","id":"load-package","dir":"Articles","previous_headings":"","what":"Load package","title":"Base functions","text":"","code":"library(echos)"},{"path":"https://ahaeusser.github.io/echos/articles/vignette_01_baseR.html","id":"prepare-dataset","dir":"Articles","previous_headings":"","what":"Prepare dataset","title":"Base functions","text":"first example, want model well-known AirPassenger time series (ts object). dataset contains monthly totals international airline passengers (thousands) January 1949 December 1960 144 observations total. first 132 observations used model training (n_train) last 12 observations used testing (n_ahead). xtrain xtest numeric vectors containing training testing data.","code":"# Forecast horizon n_ahead <- 12 # Number of observations (total) n_obs <- length(AirPassengers) # Number of observations (training data) n_train <- n_obs - n_ahead  # Prepare train and test data as numeric vectors xtrain <- AirPassengers[(1:n_train)] xtest <- AirPassengers[((n_train+1):n_obs)]  xtrain #>   [1] 112 118 132 129 121 135 148 148 136 119 104 118 115 126 141 135 125 149 #>  [19] 170 170 158 133 114 140 145 150 178 163 172 178 199 199 184 162 146 166 #>  [37] 171 180 193 181 183 218 230 242 209 191 172 194 196 196 236 235 229 243 #>  [55] 264 272 237 211 180 201 204 188 235 227 234 264 302 293 259 229 203 229 #>  [73] 242 233 267 269 270 315 364 347 312 274 237 278 284 277 317 313 318 374 #>  [91] 413 405 355 306 271 306 315 301 356 348 355 422 465 467 404 347 305 336 #> [109] 340 318 362 348 363 435 491 505 404 359 310 337 360 342 406 396 420 472 #> [127] 548 559 463 407 362 405 xtest #>  [1] 417 391 419 461 472 535 622 606 508 461 390 432"},{"path":"https://ahaeusser.github.io/echos/articles/vignette_01_baseR.html","id":"train-esn-model","dir":"Articles","previous_headings":"","what":"Train ESN model","title":"Base functions","text":"function train_esn() used automatically train ESN input data xtrain, output xmodel object class esn. object xmodel list containing actual fitted values, residuals, internal states states_train, estimated coefficients ridge regression estimation, hyperparameters, etc. can summarize model using generic S3 method summary() get detailed information trained model. output , get following information trained ESN model:","code":"# Train ESN model xmodel <- train_esn(y = xtrain)  # Summarize model summary(xmodel) #>  #> --- Inputs ----------------------------------------------------- #> n_obs        = 132 #> n_diff       = 1 #> lags         = 1 #>  #> --- Reservoir generation --------------------------------------- #> n_states     = 52 #> alpha        = 1 #> rho          = 1 #> density      = 0.5 #> scale_inputs = [-0.5, 0.5] #> scale_win    = [-0.5, 0.5] #> scale_wres   = [-0.5, 0.5] #>  #> --- Model selection -------------------------------------------- #> n_models     = 104 #> df           = 15.53 #> lambda       = 0.036"},{"path":"https://ahaeusser.github.io/echos/articles/vignette_01_baseR.html","id":"forecast-esn-model","dir":"Articles","previous_headings":"","what":"Forecast ESN model","title":"Base functions","text":"function forecast_esn() used forecast trained model xmodel n_ahead steps future. output xfcst list class forecast_esn containing point forecasts, actual fitted values, forecast horizon n_ahead model specification model_spec. can use generic S3 method plot() visualize point forecast within xfcst add holdout test data xtest.","code":"# Forecast ESN model xfcst <- forecast_esn(xmodel, n_ahead = n_ahead)  # Extract point and interval forecasts xfcst$point #>  [1] 420.5592 402.2205 449.4405 438.6973 466.9279 513.2675 580.4146 588.4173 #>  [9] 497.5575 448.8337 405.7796 443.9338 xfcst$interval #>       lower(80) lower(95) upper(80) upper(95) #>  [1,]  401.0506  410.1288  435.6200  439.5025 #>  [2,]  376.8707  383.7836  422.2915  427.7195 #>  [3,]  420.4539  428.0697  470.5884  477.6391 #>  [4,]  407.8879  417.4741  459.1989  465.2480 #>  [5,]  434.5537  444.3180  489.6266  495.6535 #>  [6,]  479.1714  488.8532  534.6986  544.8950 #>  [7,]  541.6526  556.2674  603.6298  615.8202 #>  [8,]  550.4265  568.7352  611.3039  620.8753 #>  [9,]  460.5468  478.2108  520.0018  536.9712 #> [10,]  415.8190  425.2954  471.0781  490.6883 #> [11,]  371.6403  382.5814  433.4297  443.4057 #> [12,]  406.4784  419.3160  470.5589  481.1878  # Plot forecast and test data plot(xfcst, test = xtest)"},{"path":"https://ahaeusser.github.io/echos/articles/vignette_02_tidyR.html","id":"load-package","dir":"Articles","previous_headings":"","what":"Load package","title":"Tidy functions","text":"","code":"library(echos) library(tidyverse) library(tsibble) library(fable)"},{"path":"https://ahaeusser.github.io/echos/articles/vignette_02_tidyR.html","id":"prepare-dataset","dir":"Articles","previous_headings":"","what":"Prepare dataset","title":"Tidy functions","text":"example, use m4_data. dataset monthly tsibble, filtered include time series \"M21655\" \"M2717\". resulting object train_frame contains training data visualized .","code":"train_frame <- m4_data %>%   filter(series %in% c(\"M21655\", \"M2717\"))  train_frame #> # A tsibble: 494 x 4 [1M] #> # Key:       series [2] #>    series category       index value #>    <chr>  <fct>          <mth> <dbl> #>  1 M21655 Demographic 1995 Jan  4970 #>  2 M21655 Demographic 1995 Feb  5010 #>  3 M21655 Demographic 1995 Mrz  5060 #>  4 M21655 Demographic 1995 Apr  5010 #>  5 M21655 Demographic 1995 Mai  5610 #>  6 M21655 Demographic 1995 Jun  6040 #>  7 M21655 Demographic 1995 Jul  6450 #>  8 M21655 Demographic 1995 Aug  6370 #>  9 M21655 Demographic 1995 Sep  5190 #> 10 M21655 Demographic 1995 Okt  5250 #> # ℹ 484 more rows  p <- ggplot()  p <- p + geom_line(   data = train_frame,   aes(     x = index,     y = value),   linewidth = 0.5 )  p <- p + facet_wrap(   vars(series),   ncol = 1,   scales = \"free\")  p"},{"path":"https://ahaeusser.github.io/echos/articles/vignette_02_tidyR.html","id":"train-esn-model","dir":"Articles","previous_headings":"","what":"Train ESN model","title":"Tidy functions","text":"function ESN() used combination model() fabletools package train Echo State Network variable value. trained models stored mable (.e., model table). Additionally, ARIMA() model trained benchmark.","code":"mable_frame <- train_frame %>%   model(     \"ESN\" = ESN(value),     \"ARIMA\" = ARIMA(value)     )  mable_frame #> # A mable: 2 x 3 #> # Key:     series [2] #>   series                              ESN                     ARIMA #>   <chr>                           <model>                   <model> #> 1 M21655   <ESN({97, 1, 1}, {194, 25.8})> <ARIMA(1,0,0)(1,1,2)[12]> #> 2 M2717  <ESN({100, 1, 1}, {200, 28.78})> <ARIMA(2,1,4)(0,1,0)[12]>"},{"path":"https://ahaeusser.github.io/echos/articles/vignette_02_tidyR.html","id":"forecast-esn-model","dir":"Articles","previous_headings":"","what":"Forecast ESN model","title":"Tidy functions","text":"Forecasts generated via function forecast(), forecast horizon set h = 18 (.e., 18-month ahead forecasts). forecasts stored fable (.e., forecast table) visualized along historic training data.","code":"fable_frame <- mable_frame %>%   forecast(h = 18)  fable_frame #> # A fable: 72 x 5 [1M] #> # Key:     series, .model [4] #>    series .model    index #>    <chr>  <chr>     <mth> #>  1 M21655 ESN    2015 Apr #>  2 M21655 ESN    2015 Mai #>  3 M21655 ESN    2015 Jun #>  4 M21655 ESN    2015 Jul #>  5 M21655 ESN    2015 Aug #>  6 M21655 ESN    2015 Sep #>  7 M21655 ESN    2015 Okt #>  8 M21655 ESN    2015 Nov #>  9 M21655 ESN    2015 Dez #> 10 M21655 ESN    2016 Jan #> # ℹ 62 more rows #> # ℹ 2 more variables: value <dist>, .mean <dbl>  fable_frame %>%   autoplot(train_frame, level = NULL)"},{"path":"https://ahaeusser.github.io/echos/articles/vignette_03_datasets.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Datasets","text":"vignette gives quick tour time series datasets embedded echos: m4_data: Six monthly time series drawn well‑known M4 Forecasting Competition. synthetic_data: Ten synthetic time series, useful teaching, prototyping testing.","code":""},{"path":"https://ahaeusser.github.io/echos/articles/vignette_03_datasets.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load packages","title":"Datasets","text":"","code":"library(echos) library(tidyverse) library(tsibble)"},{"path":"https://ahaeusser.github.io/echos/articles/vignette_03_datasets.html","id":"m4-data","dir":"Articles","previous_headings":"","what":"M4 data","title":"Datasets","text":"dataset m4_data tsibble six monthly time series M4 Forecasting Competition. datasets contains following time series: M21655 (Demographic), 1995 Jan - 2015 Mar M21683 (Demographic), 2000 Jan - 2023 Apr M2717 (Macro), 1996 Jan - 2016 Nov M28597 (Industry), 1996 Jan - 2016 Dec M42529 (Finance), 2001 Jan - 2009 Apr M4813 (Macro), 1994 Apr - 2006 May","code":"m4_data #> # A tsibble: 1,152 x 4 [1M] #> # Key:       series [6] #>    series category       index value #>    <chr>  <fct>          <mth> <dbl> #>  1 M21655 Demographic 1995 Jan  4970 #>  2 M21655 Demographic 1995 Feb  5010 #>  3 M21655 Demographic 1995 Mrz  5060 #>  4 M21655 Demographic 1995 Apr  5010 #>  5 M21655 Demographic 1995 Mai  5610 #>  6 M21655 Demographic 1995 Jun  6040 #>  7 M21655 Demographic 1995 Jul  6450 #>  8 M21655 Demographic 1995 Aug  6370 #>  9 M21655 Demographic 1995 Sep  5190 #> 10 M21655 Demographic 1995 Okt  5250 #> # ℹ 1,142 more rows"},{"path":"https://ahaeusser.github.io/echos/articles/vignette_03_datasets.html","id":"synthetic-data","dir":"Articles","previous_headings":"","what":"Synthetic data","title":"Datasets","text":"dataset synthetic_data tibble ten synthetic time series. dataset contains following time series: Square Wave Sawtooth Wave Harmonic Wave Harmonic Wave w/ Trend Amplitude Modulated Wave Frequency Modulated Wave AR(1) Process MA(2) Process White Noise Process Random Walk Process","code":"synthetic_data #> # A tibble: 2,000 × 3 #>    variable    index value #>    <chr>       <int> <dbl> #>  1 Square Wave     1     1 #>  2 Square Wave     2     1 #>  3 Square Wave     3     1 #>  4 Square Wave     4     1 #>  5 Square Wave     5     1 #>  6 Square Wave     6     1 #>  7 Square Wave     7     1 #>  8 Square Wave     8     1 #>  9 Square Wave     9     1 #> 10 Square Wave    10     1 #> # ℹ 1,990 more rows"},{"path":"https://ahaeusser.github.io/echos/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Häußer. Author, maintainer, copyright holder.","code":""},{"path":"https://ahaeusser.github.io/echos/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Häußer (2025). echos: Echo State Networks Time Series Modeling Forecasting. R package version 1.0.2, https://github.com/ahaeusser/echos.","code":"@Manual{,   title = {echos: Echo State Networks for Time Series Modeling and Forecasting},   author = {Alexander Häußer},   year = {2025},   note = {R package version 1.0.2},   url = {https://github.com/ahaeusser/echos}, }"},{"path":"https://ahaeusser.github.io/echos/index.html","id":"echos-","dir":"","previous_headings":"","what":"Echo State Networks for Time Series Modeling and Forecasting","title":"Echo State Networks for Time Series Modeling and Forecasting","text":"echos package provides comprehensive set functions methods modeling forecasting univariate time series using Echo State Networks (ESNs). offers two alternative approaches: Base R interface: Functions modeling forecasting time series using numeric vectors, allowing straightforward integration existing R workflows. Tidy interface: seamless integration fable framework based tsibble, enabling tidy time series forecasting model evaluation. interface leverages fabletools package, providing consistent streamlined workflow model development, evaluation, visualization. package features lightweight implementation enables fast fully automatic model training forecasting using ESNs. can quickly easily build accurate ESN models without requiring extensive hyperparameter tuning manual configuration.","code":""},{"path":"https://ahaeusser.github.io/echos/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Echo State Networks for Time Series Modeling and Forecasting","text":"can install stable version CRAN: can install development version GitHub:","code":"install.packages(\"echos\") # install.packages(\"devtools\") devtools::install_github(\"ahaeusser/echos\")"},{"path":"https://ahaeusser.github.io/echos/index.html","id":"base-r","dir":"","previous_headings":"","what":"Base R","title":"Echo State Networks for Time Series Modeling and Forecasting","text":"","code":"library(echos)  # Forecast horizon n_ahead <- 12 # forecast horizon # Number of observations n_obs <- length(AirPassengers) # Number of observations for training n_train <- n_obs - n_ahead  # Prepare train and test data xtrain <- AirPassengers[(1:n_train)] xtest <- AirPassengers[((n_train+1):n_obs)]  # Train and forecast ESN model xmodel <- train_esn(y = xtrain) xfcst <- forecast_esn(xmodel, n_ahead = n_ahead)  # Plot result plot(xfcst, test = xtest)"},{"path":"https://ahaeusser.github.io/echos/index.html","id":"tidy-r","dir":"","previous_headings":"","what":"Tidy R","title":"Echo State Networks for Time Series Modeling and Forecasting","text":"","code":"library(echos) library(tidyverse) library(tsibble) library(fable)  # Prepare train data train_frame <- m4_data %>%   filter(series %in% c(\"M21655\", \"M2717\"))  # Train and forecast ESN model train_frame %>%   model(     \"ESN\" = ESN(value),     \"ARIMA\" = ARIMA(value)     ) %>%   forecast(h = 18) %>%   autoplot(train_frame, level = NULL)"},{"path":"https://ahaeusser.github.io/echos/reference/ESN.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an Echo State Network — ESN","title":"Train an Echo State Network — ESN","text":"Train Echo State Network (ESN) univariate time series.    function automatically manages data pre-processing, reservoir    generation (.e., internal states) model estimation selection.    function wrapper train_esn() intended used    combination fabletools::model().","code":""},{"path":"https://ahaeusser.github.io/echos/reference/ESN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an Echo State Network — ESN","text":"","code":"ESN(formula, ...)"},{"path":"https://ahaeusser.github.io/echos/reference/ESN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an Echo State Network — ESN","text":"formula Model specification (currently use). ... arguments passed train_esn().","code":""},{"path":"https://ahaeusser.github.io/echos/reference/ESN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an Echo State Network — ESN","text":"object class ESN.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/ESN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an Echo State Network — ESN","text":"","code":"library(tsibble) #>  #> Attaching package: 'tsibble' #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, union library(fable) AirPassengers %>% as_tsibble() %>% model(\"ESN\" = ESN(value)) #> # A mable: 1 x 1 #>                               ESN #>                           <model> #> 1 <ESN({57, 1, 1}, {114, 16.68})>"},{"path":"https://ahaeusser.github.io/echos/reference/filter_esn.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter ESN models — filter_esn","title":"Filter ESN models — filter_esn","text":"Filter object class mdl_df (\"mable\") include   ESN models , .e., models like ARIMA ETS excluded   mable.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/filter_esn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter ESN models — filter_esn","text":"","code":"filter_esn(object)"},{"path":"https://ahaeusser.github.io/echos/reference/filter_esn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter ESN models — filter_esn","text":"object object class mdl_df, containing ESN model.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/filter_esn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter ESN models — filter_esn","text":"object class mdl_df long-format.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/filter_esn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter ESN models — filter_esn","text":"","code":"library(tsibble) library(fable) AirPassengers %>% as_tsibble() %>% model(\"ESN\" = ESN(value)) %>% filter_esn() #> # A mable: 1 x 2 #> # Key:     model [1] #>   model                           .spec #>   <chr>                         <model> #> 1 ESN   <ESN({57, 1, 1}, {114, 16.68})>"},{"path":"https://ahaeusser.github.io/echos/reference/fitted.ESN.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract fitted values from a trained ESN — fitted.ESN","title":"Extract fitted values from a trained ESN — fitted.ESN","text":"Extract fitted values trained ESN tsibble.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/fitted.ESN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract fitted values from a trained ESN — fitted.ESN","text":"","code":"# S3 method for class 'ESN' fitted(object, ...)"},{"path":"https://ahaeusser.github.io/echos/reference/fitted.ESN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract fitted values from a trained ESN — fitted.ESN","text":"object object class mdl_df, containing ESN model. ... Currently use.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/fitted.ESN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract fitted values from a trained ESN — fitted.ESN","text":"Fitted values extracted object.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/fitted.ESN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract fitted values from a trained ESN — fitted.ESN","text":"","code":"library(tsibble) library(fable) AirPassengers %>% as_tsibble() %>% model(\"ESN\" = ESN(value)) %>% fitted() #> # A tsibble: 144 x 3 [1M] #> # Key:       .model [1] #>    .model    index .fitted #>    <chr>     <mth>   <dbl> #>  1 ESN    1949 Jan     NA  #>  2 ESN    1949 Feb     NA  #>  3 ESN    1949 Mrz     NA  #>  4 ESN    1949 Apr     NA  #>  5 ESN    1949 Mai     NA  #>  6 ESN    1949 Jun     NA  #>  7 ESN    1949 Jul     NA  #>  8 ESN    1949 Aug     NA  #>  9 ESN    1949 Sep     NA  #> 10 ESN    1949 Okt    140. #> # ℹ 134 more rows"},{"path":"https://ahaeusser.github.io/echos/reference/fit_ridge.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a linear model via ridge regression — fit_ridge","title":"Estimate a linear model via ridge regression — fit_ridge","text":"Estimate linear model via Ordinary Least Squares (OLS).    fit_lm() wrapper function stats::lm.fit()   additional output like goodness--fit metrics (e.g. information criteria).    function slightly faster stats::lm(), bit    importantly, resulting object size much smaller.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/fit_ridge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a linear model via ridge regression — fit_ridge","text":"","code":"fit_ridge(x, y, lambda)"},{"path":"https://ahaeusser.github.io/echos/reference/fit_ridge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a linear model via ridge regression — fit_ridge","text":"x Numeric matrix. design matrix containing predictor variables. y Numeric matrix. response variable(s). lambda Numeric value. regularization parameter.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/fit_ridge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a linear model via ridge regression — fit_ridge","text":"list containing estimated coefficients, fitted values   goodness--fit metrics.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/forecast.ESN.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecast an Echo State Network — forecast.ESN","title":"Forecast an Echo State Network — forecast.ESN","text":"Forecast Echo State Network (ESN) trained model via    recursive forecasting. Forecast intervals generated simulating    future sample path based moving block bootstrap residuals    estimating quantiles simulations. function wrapper    forecast_esn() intended used combination    fabletools::model().","code":""},{"path":"https://ahaeusser.github.io/echos/reference/forecast.ESN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecast an Echo State Network — forecast.ESN","text":"","code":"# S3 method for class 'ESN' forecast(   object,   new_data,   normal = TRUE,   n_sim = 200,   specials = NULL,   xreg = NULL,   ... )"},{"path":"https://ahaeusser.github.io/echos/reference/forecast.ESN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecast an Echo State Network — forecast.ESN","text":"object object class mdl_df, containing ESN model. new_data Forecast horizon (n-step ahead forecast). normal Logical value. TRUE, dist_normal() used, otherwise dist_sample(). n_sim Integer value. number future sample path generated simulation. specials Currently use. xreg tsibble containing exogenous variables. ... Currently use.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/forecast.ESN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecast an Echo State Network — forecast.ESN","text":"object class fbl_ts (\"fable\").","code":""},{"path":"https://ahaeusser.github.io/echos/reference/forecast.ESN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forecast an Echo State Network — forecast.ESN","text":"","code":"library(tsibble) library(fable) AirPassengers %>% as_tsibble() %>% model(\"ESN\" = ESN(value)) %>% forecast(h = 18) #> # A fable: 18 x 4 [1M] #> # Key:     .model [1] #>    .model    index #>    <chr>     <mth> #>  1 ESN    1961 Jan #>  2 ESN    1961 Feb #>  3 ESN    1961 Mrz #>  4 ESN    1961 Apr #>  5 ESN    1961 Mai #>  6 ESN    1961 Jun #>  7 ESN    1961 Jul #>  8 ESN    1961 Aug #>  9 ESN    1961 Sep #> 10 ESN    1961 Okt #> 11 ESN    1961 Nov #> 12 ESN    1961 Dez #> 13 ESN    1962 Jan #> 14 ESN    1962 Feb #> 15 ESN    1962 Mrz #> 16 ESN    1962 Apr #> 17 ESN    1962 Mai #> 18 ESN    1962 Jun #> # ℹ 2 more variables: value <dist>, .mean <dbl>"},{"path":"https://ahaeusser.github.io/echos/reference/forecast_esn.html","id":null,"dir":"Reference","previous_headings":"","what":"Forecast an Echo State Network — forecast_esn","title":"Forecast an Echo State Network — forecast_esn","text":"Forecast Echo State Network (ESN) trained model via    recursive forecasting. Forecast intervals generated simulating    future sample path based moving block bootstrap residuals    estimating quantiles simulations.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/forecast_esn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forecast an Echo State Network — forecast_esn","text":"","code":"forecast_esn(   object,   n_ahead = 18,   levels = c(80, 95),   n_sim = 100,   n_seed = 42 )"},{"path":"https://ahaeusser.github.io/echos/reference/forecast_esn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forecast an Echo State Network — forecast_esn","text":"object object class esn. result call train_esn(). n_ahead Integer value. number periods forecasting (.e. forecast horizon). levels Integer vector. levels forecast intervals, e.g., 80% 95%. n_sim Integer value. number future sample path generated simulation. n_seed Integer value. seed random number generator (reproducibility).","code":""},{"path":"https://ahaeusser.github.io/echos/reference/forecast_esn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forecast an Echo State Network — forecast_esn","text":"list containing: point: Numeric vector containing point forecasts. interval: Numeric matrix containing forecast intervals. sim: Numeric matrix containing simulated future sample path. levels: Integer vector. levels forecast intervals. actual: Numeric vector containing actual values. fitted: Numeric vector containing fitted values. n_ahead: Integer value. number periods forecasting (forecast horizon). model_spec: Character value. model specification string.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/forecast_esn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forecast an Echo State Network — forecast_esn","text":"","code":"xdata <- as.numeric(AirPassengers) xmodel <- train_esn(y = xdata) xfcst <- forecast_esn(xmodel, n_ahead = 12) plot(xfcst)"},{"path":"https://ahaeusser.github.io/echos/reference/glance.ESN.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of trained models during random search — glance.ESN","title":"Summary of trained models during random search — glance.ESN","text":"Return summary statistics trained ESN models random   search tibble. model: Model identifier. loglik: Log-likelihood. nobs: Number observations. df: Effective degrees freedom. lambda: Regularization parameter. aic: Akaike Information Criterion. aicc: Corrected Akaike Information Criterion. bic: Bayesian Information Criterion. hqc: Hannan-Quinn Information Criterion. mse: Mean Squared Error. mae: Mean Absolute Error.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/glance.ESN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of trained models during random search — glance.ESN","text":"","code":"# S3 method for class 'ESN' glance(x, ...)"},{"path":"https://ahaeusser.github.io/echos/reference/glance.ESN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of trained models during random search — glance.ESN","text":"x object class mdl_df, containing ESN model. ... Currently use.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/glance.ESN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of trained models during random search — glance.ESN","text":"Summary statistics extracted object.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/glance.ESN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of trained models during random search — glance.ESN","text":"","code":"library(tsibble) library(fable) AirPassengers %>% as_tsibble() %>% model(\"ESN\" = ESN(value)) %>% glance() #> # A tibble: 114 × 12 #>    .model model      loglik  nobs    df  lambda   aic  aicc   bic   hqc     mse #>    <chr>  <chr>       <dbl> <int> <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl> #>  1 ESN    model(092)   189.   135  16.7 0.0457  -344. -339. -296. -325. 0.00357 #>  2 ESN    model(085)   198.   135  20.7 0.00912 -354. -346. -294. -330. 0.00312 #>  3 ESN    model(070)   186.   135  15.7 0.0704  -340. -335. -294. -321. 0.00374 #>  4 ESN    model(015)   185.   135  15.6 0.0757  -339. -334. -294. -320. 0.00378 #>  5 ESN    model(054)   184.   135  15.3 0.0872  -337. -333. -293. -319. 0.00385 #>  6 ESN    model(030)   183.   135  15.1 0.0927  -336. -332. -292. -318. 0.00388 #>  7 ESN    model(100)   182.   135  15.0 0.102   -335. -331. -291. -317. 0.00394 #>  8 ESN    model(112)   178.   135  14.2 0.146   -328. -324. -287. -311. 0.00418 #>  9 ESN    model(086)   178.   135  14.2 0.147   -328. -324. -287. -311. 0.00419 #> 10 ESN    model(028)   177.   135  14.0 0.157   -326. -323. -285. -310. 0.00424 #> # ℹ 104 more rows #> # ℹ 1 more variable: mae <dbl>"},{"path":"https://ahaeusser.github.io/echos/reference/is.esn.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if object is of class ","title":"Checks if object is of class ","text":"Returns TRUE object class \"esn\".","code":""},{"path":"https://ahaeusser.github.io/echos/reference/is.esn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if object is of class ","text":"","code":"is.esn(object)"},{"path":"https://ahaeusser.github.io/echos/reference/is.esn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if object is of class ","text":"object object tested.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/is.esn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if object is of class ","text":"Logical value. TRUE, object class \"esn\".","code":""},{"path":"https://ahaeusser.github.io/echos/reference/is.esn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if object is of class ","text":"","code":"xdata <- as.numeric(AirPassengers) xmodel <- train_esn(y = xdata) is.esn(xmodel) #> [1] TRUE"},{"path":"https://ahaeusser.github.io/echos/reference/is.forecast_esn.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if object is of class ","title":"Checks if object is of class ","text":"Returns TRUE object class \"forecast_esn\".","code":""},{"path":"https://ahaeusser.github.io/echos/reference/is.forecast_esn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if object is of class ","text":"","code":"is.forecast_esn(object)"},{"path":"https://ahaeusser.github.io/echos/reference/is.forecast_esn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if object is of class ","text":"object object tested.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/is.forecast_esn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if object is of class ","text":"Logical value. TRUE, object class \"forecast_esn\".","code":""},{"path":"https://ahaeusser.github.io/echos/reference/is.forecast_esn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if object is of class ","text":"","code":"xdata <- as.numeric(AirPassengers) xmodel <- train_esn(y = xdata) xfcst <- forecast_esn(xmodel, n_ahead = 12) is.forecast_esn(xfcst) #> [1] TRUE"},{"path":"https://ahaeusser.github.io/echos/reference/m4_data.html","id":null,"dir":"Reference","previous_headings":"","what":"M4 dataset — m4_data","title":"M4 dataset — m4_data","text":"tsibble six monthly time series M4   Forecasting Competition. datasets contains following time series: M21655 (Demographic), 1995 Jan - 2015 Mar M21683 (Demographic), 2000 Jan - 2023 Apr M2717 (Macro), 1996 Jan - 2016 Nov M28597 (Industry), 1996 Jan - 2016 Dec M42529 (Finance), 2001 Jan - 2009 Apr M4813 (Macro), 1994 Apr - 2006 May","code":""},{"path":"https://ahaeusser.github.io/echos/reference/m4_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"M4 dataset — m4_data","text":"","code":"data(m4_data)"},{"path":"https://ahaeusser.github.io/echos/reference/m4_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"M4 dataset — m4_data","text":"time series object class tsibble 1.152 rows 4 columns: series: Unique identifier character (key variable). category: Category (e.g., Demographic, Macro) factor. index: Date yearmonth (index variable). value: Value numeric (measurement variable).","code":""},{"path":"https://ahaeusser.github.io/echos/reference/m4_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"M4 dataset — m4_data","text":"M4 Forecasting Competition","code":""},{"path":"https://ahaeusser.github.io/echos/reference/m4_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"M4 dataset — m4_data","text":"","code":"data(m4_data)"},{"path":"https://ahaeusser.github.io/echos/reference/model_sum.ESN.html","id":null,"dir":"Reference","previous_headings":"","what":"Model specification of a trained ESN model — model_sum.ESN","title":"Model specification of a trained ESN model — model_sum.ESN","text":"Provides compact overview model specification    format ESN({n_states, alpha, rho}, {n_models, df}).","code":""},{"path":"https://ahaeusser.github.io/echos/reference/model_sum.ESN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model specification of a trained ESN model — model_sum.ESN","text":"","code":"# S3 method for class 'ESN' model_sum(x)"},{"path":"https://ahaeusser.github.io/echos/reference/model_sum.ESN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model specification of a trained ESN model — model_sum.ESN","text":"x object class mdl_df, containing ESN model.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/model_sum.ESN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model specification of a trained ESN model — model_sum.ESN","text":"Model summary extracted object.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/model_sum.ESN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model specification of a trained ESN model — model_sum.ESN","text":"","code":"library(tsibble) library(fable) AirPassengers %>% as_tsibble() %>% model(\"ESN\" = ESN(value)) #> # A mable: 1 x 1 #>                               ESN #>                           <model> #> 1 <ESN({57, 1, 1}, {114, 16.68})>"},{"path":"https://ahaeusser.github.io/echos/reference/plot.esn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot internal states of a trained ESN model — plot.esn","title":"Plot internal states of a trained ESN model — plot.esn","text":"Plot internal states (.e., reservoir) trained ESN   model line chart.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/plot.esn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot internal states of a trained ESN model — plot.esn","text":"","code":"# S3 method for class 'esn' plot(x, ...)"},{"path":"https://ahaeusser.github.io/echos/reference/plot.esn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot internal states of a trained ESN model — plot.esn","text":"x object class esn. result call train_esn(). ... arguments passed matplot().","code":""},{"path":"https://ahaeusser.github.io/echos/reference/plot.esn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot internal states of a trained ESN model — plot.esn","text":"Line chart internal states.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/plot.esn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot internal states of a trained ESN model — plot.esn","text":"","code":"xdata <- as.numeric(AirPassengers) xmodel <- train_esn(y = xdata) plot(xmodel)"},{"path":"https://ahaeusser.github.io/echos/reference/plot.forecast_esn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot forecasts of a trained ESN model — plot.forecast_esn","title":"Plot forecasts of a trained ESN model — plot.forecast_esn","text":"Plot point forecasts forecast intervals, actual values   trained ESN model. Optionally, test data (--sample) fitted values   can added plot.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/plot.forecast_esn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot forecasts of a trained ESN model — plot.forecast_esn","text":"","code":"# S3 method for class 'forecast_esn' plot(x, test = NULL, fitted = TRUE, interval = TRUE, n_obs = NULL, ...)"},{"path":"https://ahaeusser.github.io/echos/reference/plot.forecast_esn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot forecasts of a trained ESN model — plot.forecast_esn","text":"x object class forecast_esn. result call forecast_esn(). test Numeric vector. Test data, .e., --sample actual values. fitted Logical value. TRUE, fitted values added. interval Logical value. TRUE, forecast intervals added. n_obs Integer value. NULL, -sample values shown, otherwise last n_obs. ... Currently use.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/plot.forecast_esn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot forecasts of a trained ESN model — plot.forecast_esn","text":"Line chart point forecast actual values.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/plot.forecast_esn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot forecasts of a trained ESN model — plot.forecast_esn","text":"","code":"xdata <- as.numeric(AirPassengers) xmodel <- train_esn(y = xdata) xfcst <- forecast_esn(xmodel, n_ahead = 12) plot(xfcst)"},{"path":"https://ahaeusser.github.io/echos/reference/print.esn.html","id":null,"dir":"Reference","previous_headings":"","what":"Print model specification of the trained ESN model — print.esn","title":"Print model specification of the trained ESN model — print.esn","text":"Provides compact overview model specification    format ESN({n_states, alpha, rho}, {n_models, df}).","code":""},{"path":"https://ahaeusser.github.io/echos/reference/print.esn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print model specification of the trained ESN model — print.esn","text":"","code":"# S3 method for class 'esn' print(x, ...)"},{"path":"https://ahaeusser.github.io/echos/reference/print.esn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print model specification of the trained ESN model — print.esn","text":"x object class esn. result call train_esn(). ... Currently use.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/print.esn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print model specification of the trained ESN model — print.esn","text":"Print specification trained ESN model.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/print.esn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print model specification of the trained ESN model — print.esn","text":"","code":"xdata <- as.numeric(AirPassengers) xmodel <- train_esn(y = xdata) print(xmodel) #> ESN({57, 1, 1}, {114, 16.68})"},{"path":"https://ahaeusser.github.io/echos/reference/report.ESN.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide a detailed summary of the trained ESN model — report.ESN","title":"Provide a detailed summary of the trained ESN model — report.ESN","text":"Provide detailed summary trained ESN model.    function wrapper summary.esn().","code":""},{"path":"https://ahaeusser.github.io/echos/reference/report.ESN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide a detailed summary of the trained ESN model — report.ESN","text":"","code":"# S3 method for class 'ESN' report(object, ...)"},{"path":"https://ahaeusser.github.io/echos/reference/report.ESN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide a detailed summary of the trained ESN model — report.ESN","text":"object object class mdl_df, containing ESN model. ... Currently use.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/report.ESN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide a detailed summary of the trained ESN model — report.ESN","text":"Print detailed model summary.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/report.ESN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide a detailed summary of the trained ESN model — report.ESN","text":"","code":"library(tsibble) library(fable) AirPassengers %>% as_tsibble() %>% model(\"ESN\" = ESN(value)) %>% report() #> Series: value  #> Model: ESN({57, 1, 1}, {114, 16.68})  #>  #> --- Inputs ----------------------------------------------------- #> n_obs        = 144 #> n_diff       = 1 #> lags         = 1 #>  #> --- Reservoir generation --------------------------------------- #> n_states     = 57 #> alpha        = 1 #> rho          = 1 #> density      = 0.5 #> scale_inputs = [-0.5, 0.5] #> scale_win    = [-0.5, 0.5] #> scale_wres   = [-0.5, 0.5] #>  #> --- Model selection -------------------------------------------- #> n_models     = 114 #> df           = 16.68 #> lambda       = 0.0457"},{"path":"https://ahaeusser.github.io/echos/reference/reservoir.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the reservoir from a trained ESN as tibble — reservoir","title":"Return the reservoir from a trained ESN as tibble — reservoir","text":"Return reservoir (internal states)   trained ESN tibble. function works models   class ESN.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/reservoir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the reservoir from a trained ESN as tibble — reservoir","text":"","code":"reservoir(object)"},{"path":"https://ahaeusser.github.io/echos/reference/reservoir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the reservoir from a trained ESN as tibble — reservoir","text":"object object class mdl_df, containing ESN model.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/reservoir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the reservoir from a trained ESN as tibble — reservoir","text":"tibble containing reservoir (internal states).","code":""},{"path":"https://ahaeusser.github.io/echos/reference/reservoir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the reservoir from a trained ESN as tibble — reservoir","text":"","code":"library(tsibble) library(fable) AirPassengers %>% as_tsibble() %>% model(\"ESN\" = ESN(value)) %>% reservoir() #> # A tibble: 8,094 × 4 #>    model index state        value #>    <chr> <int> <chr>        <dbl> #>  1 ESN       1 state(01)  0       #>  2 ESN       2 state(01)  0.0463  #>  3 ESN       3 state(01) -0.0106  #>  4 ESN       4 state(01) -0.0719  #>  5 ESN       5 state(01) -0.00112 #>  6 ESN       6 state(01)  0.0387  #>  7 ESN       7 state(01) -0.0422  #>  8 ESN       8 state(01) -0.131   #>  9 ESN       9 state(01) -0.0888  #> 10 ESN      10 state(01)  0.0239  #> # ℹ 8,084 more rows"},{"path":"https://ahaeusser.github.io/echos/reference/residuals.ESN.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract residuals from a trained ESN — residuals.ESN","title":"Extract residuals from a trained ESN — residuals.ESN","text":"Extract residuals trained ESN tsibble.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/residuals.ESN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract residuals from a trained ESN — residuals.ESN","text":"","code":"# S3 method for class 'ESN' residuals(object, ...)"},{"path":"https://ahaeusser.github.io/echos/reference/residuals.ESN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract residuals from a trained ESN — residuals.ESN","text":"object object class mdl_df, containing ESN model. ... Currently use.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/residuals.ESN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract residuals from a trained ESN — residuals.ESN","text":"Residuals extracted object.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/residuals.ESN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract residuals from a trained ESN — residuals.ESN","text":"","code":"library(tsibble) library(fable) AirPassengers %>% as_tsibble() %>% model(\"ESN\" = ESN(value)) %>% residuals() #> # A tsibble: 144 x 3 [1M] #> # Key:       .model [1] #>    .model    index .resid #>    <chr>     <mth>  <dbl> #>  1 ESN    1949 Jan   NA   #>  2 ESN    1949 Feb   NA   #>  3 ESN    1949 Mrz   NA   #>  4 ESN    1949 Apr   NA   #>  5 ESN    1949 Mai   NA   #>  6 ESN    1949 Jun   NA   #>  7 ESN    1949 Jul   NA   #>  8 ESN    1949 Aug   NA   #>  9 ESN    1949 Sep   NA   #> 10 ESN    1949 Okt  -20.8 #> # ℹ 134 more rows"},{"path":"https://ahaeusser.github.io/echos/reference/run_reservoir.html","id":null,"dir":"Reference","previous_headings":"","what":"Run reservoir — run_reservoir","title":"Run reservoir — run_reservoir","text":"Run reservoir creates internal states ESN.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/run_reservoir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run reservoir — run_reservoir","text":"input Numeric matrix containing input features win Numeric matrix. input weight matrix. wres Numeric matrix. reservoir weight matrix. alpha Numeric value. leakage rate (smoothing parameter).","code":""},{"path":"https://ahaeusser.github.io/echos/reference/run_reservoir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run reservoir — run_reservoir","text":"states train Numeric matrix internal states.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/summary.esn.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide a detailed summary of the trained ESN model — summary.esn","title":"Provide a detailed summary of the trained ESN model — summary.esn","text":"Provide detailed summary trained ESN model.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/summary.esn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide a detailed summary of the trained ESN model — summary.esn","text":"","code":"# S3 method for class 'esn' summary(object, ...)"},{"path":"https://ahaeusser.github.io/echos/reference/summary.esn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide a detailed summary of the trained ESN model — summary.esn","text":"object object class esn. result call train_esn(). ... Currently use.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/summary.esn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide a detailed summary of the trained ESN model — summary.esn","text":"Print detailed model summary.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/summary.esn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide a detailed summary of the trained ESN model — summary.esn","text":"","code":"xdata <- as.numeric(AirPassengers) xmodel <- train_esn(y = xdata) summary(xmodel) #>  #> --- Inputs ----------------------------------------------------- #> n_obs        = 144 #> n_diff       = 1 #> lags         = 1 #>  #> --- Reservoir generation --------------------------------------- #> n_states     = 57 #> alpha        = 1 #> rho          = 1 #> density      = 0.5 #> scale_inputs = [-0.5, 0.5] #> scale_win    = [-0.5, 0.5] #> scale_wres   = [-0.5, 0.5] #>  #> --- Model selection -------------------------------------------- #> n_models     = 114 #> df           = 16.68 #> lambda       = 0.0457"},{"path":"https://ahaeusser.github.io/echos/reference/synthetic_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthetic data — synthetic_data","title":"Synthetic data — synthetic_data","text":"tibble ten synthetic time series. dataset   contains following time series: Square Wave Sawtooth Wave Harmonic Wave Harmonic Wave w/ Trend Amplitude Modulated Wave Frequency Modulated Wave AR(1) Process MA(2) Process White Noise Process Random Walk Process","code":""},{"path":"https://ahaeusser.github.io/echos/reference/synthetic_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthetic data — synthetic_data","text":"","code":"data(synthetic_data)"},{"path":"https://ahaeusser.github.io/echos/reference/synthetic_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synthetic data — synthetic_data","text":"object class tibble 2.000 rows 3 columns: variable: Unique identifier character (key variable). index: Index integer (index variable). value: Value numeric (measurement variable).","code":""},{"path":"https://ahaeusser.github.io/echos/reference/synthetic_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthetic data — synthetic_data","text":"","code":"data(synthetic_data)"},{"path":"https://ahaeusser.github.io/echos/reference/tidy.ESN.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimated coefficients — tidy.ESN","title":"Estimated coefficients — tidy.ESN","text":"Return estimated coefficients trained ESN    tibble.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/tidy.ESN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimated coefficients — tidy.ESN","text":"","code":"# S3 method for class 'ESN' tidy(x, ...)"},{"path":"https://ahaeusser.github.io/echos/reference/tidy.ESN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimated coefficients — tidy.ESN","text":"x object class mdl_df, containing ESN model. ... Currently use.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/tidy.ESN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimated coefficients — tidy.ESN","text":"Coefficients extracted object.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/tidy.ESN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimated coefficients — tidy.ESN","text":"","code":"library(tsibble) library(fable) AirPassengers %>% as_tsibble() %>% model(\"ESN\" = ESN(value)) %>% tidy() #> # A tibble: 58 × 3 #>    .model term        estimate #>    <chr>  <chr>          <dbl> #>  1 ESN    (Intercept)  0.161   #>  2 ESN    state(01)   -0.128   #>  3 ESN    state(02)    0.00831 #>  4 ESN    state(03)   -0.0973  #>  5 ESN    state(04)    0.0945  #>  6 ESN    state(05)    0.0159  #>  7 ESN    state(06)    0.101   #>  8 ESN    state(07)   -0.185   #>  9 ESN    state(08)    0.308   #> 10 ESN    state(09)   -0.135   #> # ℹ 48 more rows"},{"path":"https://ahaeusser.github.io/echos/reference/train_esn.html","id":null,"dir":"Reference","previous_headings":"","what":"Train an Echo State Network — train_esn","title":"Train an Echo State Network — train_esn","text":"Train Echo State Network (ESN) univariate time series.    function automatically manages data pre-processing, reservoir    generation (.e., internal states) model estimation selection.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/train_esn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train an Echo State Network — train_esn","text":"","code":"train_esn(   y,   lags = 1,   inf_crit = \"bic\",   n_diff = NULL,   n_states = NULL,   n_models = NULL,   n_initial = NULL,   n_seed = 42,   alpha = 1,   rho = 1,   density = 0.5,   lambda = c(1e-04, 2),   scale_win = 0.5,   scale_wres = 0.5,   scale_inputs = c(-0.5, 0.5) )"},{"path":"https://ahaeusser.github.io/echos/reference/train_esn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train an Echo State Network — train_esn","text":"y Numeric vector containing response variable. lags Integer vector lag(s) associated input variable. inf_crit Character value. information criterion used variable selection inf_crit = c(\"aic\", \"aicc\", \"bic\", \"hqc\"). n_diff Integer vector. nth-differences response variable. n_states Integer value. number internal states per reservoir. n_models Integer value. maximum number (random) models train model selection. n_initial Integer value. number observations internal states initial drop (throw-). n_seed Integer value. seed random number generator (reproducibility). alpha Numeric value. leakage rate (smoothing parameter) applied reservoir. rho Numeric value. spectral radius scaling reservoir weight matrix. density Numeric value. connectivity reservoir weight matrix (dense sparse). lambda Numeric vector. Lower upper bound lambda sequence ridge regression. scale_win Numeric value. lower upper bound uniform distribution scaling input weight matrix. scale_wres Numeric value. lower upper bound uniform distribution scaling reservoir weight matrix. scale_inputs Numeric vector. lower upper bound scaling time series data.","code":""},{"path":"https://ahaeusser.github.io/echos/reference/train_esn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train an Echo State Network — train_esn","text":"list containing: actual: Numeric vector containing actual values. fitted: Numeric vector containing fitted values. resid: Numeric vector containing residuals. states_train: Numeric matrix containing internal states. method: list containing several objects meta information trained ESN (weight matrices, hyperparameters, model metrics, etc.).","code":""},{"path":"https://ahaeusser.github.io/echos/reference/train_esn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train an Echo State Network — train_esn","text":"","code":"xdata <- as.numeric(AirPassengers) xmodel <- train_esn(y = xdata) summary(xmodel) #>  #> --- Inputs ----------------------------------------------------- #> n_obs        = 144 #> n_diff       = 1 #> lags         = 1 #>  #> --- Reservoir generation --------------------------------------- #> n_states     = 57 #> alpha        = 1 #> rho          = 1 #> density      = 0.5 #> scale_inputs = [-0.5, 0.5] #> scale_win    = [-0.5, 0.5] #> scale_wres   = [-0.5, 0.5] #>  #> --- Model selection -------------------------------------------- #> n_models     = 114 #> df           = 16.68 #> lambda       = 0.0457"},{"path":[]},{"path":"https://ahaeusser.github.io/echos/news/index.html","id":"new-features-1-0-2","dir":"Changelog","previous_headings":"","what":"New features","title":"echos 1.0.2","text":"Added forecast intervals forecast_esn(), forecast.ESN() plot.forecast_esn(). Forecast intervals generated simulating future sample path based moving block bootstrap residuals estimating quantiles simulations. Added plot.esn() visualize internal states (.e., reservoir). Added filter_esn() extract ESN models mable. Added synthetic_data, dataset synthetic time series data tibble.","code":""},{"path":"https://ahaeusser.github.io/echos/news/index.html","id":"improvements-1-0-2","dir":"Changelog","previous_headings":"","what":"Improvements","title":"echos 1.0.2","text":"Improved documentation Added unit tests Reduced dependencies","code":""},{"path":"https://ahaeusser.github.io/echos/news/index.html","id":"echos-101","dir":"Changelog","previous_headings":"","what":"echos 1.0.1","title":"echos 1.0.1","text":"CRAN release: 2025-02-11 Updates due CRAN comments","code":""},{"path":"https://ahaeusser.github.io/echos/news/index.html","id":"echos-100","dir":"Changelog","previous_headings":"","what":"echos 1.0.0","title":"echos 1.0.0","text":"Initial CRAN submission","code":""}]
